{"version":3,"sources":["../../../../src/Components/FormComponent/FileBase64/index.jsx"],"names":["React","FileBase64","Component","constructor","props","state","files","handleChange","e","target","allFiles","i","length","file","reader","FileReader","readAsDataURL","onload","fileInfo","name","type","size","Math","round","base64","result","push","multiple","onDone","render","bind","defaultProps"],"mappings":"AAAA;;;;;;AAOA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,eAAe,MAAMC,UAAN,SAAyBD,KAAK,CAACE,SAA/B,CAAyC;AAEtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,YAAY,CAACC,CAAD,EAAI;AAEd;AACA,QAAIF,KAAK,GAAGE,CAAC,CAACC,MAAF,CAASH,KAArB,CAHc,CAKd;;AACA,QAAII,QAAQ,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AAErC,UAAIE,IAAI,GAAGP,KAAK,CAACK,CAAD,CAAhB,CAFqC,CAIrC;;AACA,UAAIG,MAAM,GAAG,IAAIC,UAAJ,EAAb,CALqC,CAOrC;;AACAD,MAAAA,MAAM,CAACE,aAAP,CAAqBH,IAArB,EARqC,CAUrC;;AACAC,MAAAA,MAAM,CAACG,MAAP,GAAgB,MAAM;AAEpB;AACA,YAAIC,QAAQ,GAAG;AACbC,UAAAA,IAAI,EAAEN,IAAI,CAACM,IADE;AAEbC,UAAAA,IAAI,EAAEP,IAAI,CAACO,IAFE;AAGbC,UAAAA,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAWV,IAAI,CAACQ,IAAL,GAAY,IAAvB,IAA+B,KAHxB;AAIbG,UAAAA,MAAM,EAAEV,MAAM,CAACW,MAJF;AAKbZ,UAAAA,IAAI,EAAEA;AALO,SAAf,CAHoB,CAWpB;;AACAH,QAAAA,QAAQ,CAACgB,IAAT,CAAcR,QAAd,EAZoB,CAcpB;;AACA,YAAGR,QAAQ,CAACE,MAAT,IAAmBN,KAAK,CAACM,MAA5B,EAAmC;AACjC;AACA,cAAG,KAAKR,KAAL,CAAWuB,QAAd,EAAwB,KAAKvB,KAAL,CAAWwB,MAAX,CAAkBlB,QAAlB,EAAxB,KACK,KAAKN,KAAL,CAAWwB,MAAX,CAAkBlB,QAAQ,CAAC,CAAD,CAA1B;AACN;AAEF,OArBD,CAXqC,CAgCnC;;AAEH,KAzCa,CAyCZ;;AAEH;;AAEDmB,EAAAA,MAAM,GAAG;AACP,WACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,QAAQ,EAAG,KAAKtB,YAAL,CAAkBuB,IAAlB,CAAuB,IAAvB,CAFb;AAGE,MAAA,QAAQ,EAAG,KAAK1B,KAAL,CAAWuB;AAHxB,MADF;AAMD;;AA7DqD;AAgExD1B,UAAU,CAAC8B,YAAX,GAA0B;AACxBJ,EAAAA,QAAQ,EAAE;AADc,CAA1B","sourcesContent":["/*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\r\n* Licensed Under MIT (http://opensource.org/licenses/MIT)\r\n*\r\n* React File Base64 - Version@1.0.0\r\n*\r\n*/\r\n\r\nimport React from 'react';\r\n\r\nexport default class FileBase64 extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      files: [],\r\n    };\r\n  }\r\n\r\n  handleChange(e) {\r\n\r\n    // get the files\r\n    let files = e.target.files;\r\n\r\n    // Process each file\r\n    var allFiles = [];\r\n    for (var i = 0; i < files.length; i++) {\r\n\r\n      let file = files[i];\r\n\r\n      // Make new FileReader\r\n      let reader = new FileReader();\r\n\r\n      // Convert the file to base64 text\r\n      reader.readAsDataURL(file);\r\n\r\n      // on reader load somthing...\r\n      reader.onload = () => {\r\n\r\n        // Make a fileInfo Object\r\n        let fileInfo = {\r\n          name: file.name,\r\n          type: file.type,\r\n          size: Math.round(file.size / 1000) + ' kB',\r\n          base64: reader.result,\r\n          file: file,\r\n        };\r\n\r\n        // Push it to the state\r\n        allFiles.push(fileInfo);\r\n\r\n        // If all files have been proceed\r\n        if(allFiles.length == files.length){\r\n          // Apply Callback function\r\n          if(this.props.multiple) this.props.onDone(allFiles);\r\n          else this.props.onDone(allFiles[0]);\r\n        }\r\n\r\n      } // reader.onload\r\n\r\n    } // for\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <input\r\n        type=\"file\"\r\n        onChange={ this.handleChange.bind(this) }\r\n        multiple={ this.props.multiple } />\r\n    );\r\n  }\r\n}\r\n\r\nFileBase64.defaultProps = {\r\n  multiple: false,\r\n};"],"file":"index.js"}