{"version":3,"sources":["../../../../src/Components/HistogramSlider/Histogram/Histogram.jsx"],"names":["React","Histogram","Component","constructor","props","data","maxHeightPx","max","Math","undefined","heightPxPerUnit","heightData","map","v","round","state","mask1","Date","now","mask2","numOfColumn","length","componentWillReceiveProps","setState","render","min","value","colors","console","log","vMin","vMax","range","start","end","height","index","out","in"],"mappings":";;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,eAAe,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AAGrDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,sBAGW,KAAKA,KAHhB;AAAA,QAGXC,IAHW,eAGXA,IAHW;AAAA,QAGLC,WAHK,eAGLA,WAHK;AAIjB,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGF,IAAZ,CAAZ;AACAC,IAAAA,WAAW,GAAGA,WAAW,IAAIG,SAAf,GAA2BH,WAA3B,GAAyC,EAAvD;AAEA,UAAMI,eAAe,GAAGJ,WAAW,GAAGC,GAAtC;AACA,UAAMI,UAAU,GAAGN,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIL,IAAI,CAACM,KAAL,CAAWJ,eAAe,GAAGG,CAA7B,CAAd,CAAnB;AACA,SAAKE,KAAL,GAAa;AACXV,MAAAA,IAAI,EAAEM;AADK,KAAb;AAEG,SAAKK,KAAL,GAAaC,IAAI,CAACC,GAAL,KAAa,EAA1B;AACH,SAAKC,KAAL,GAAaF,IAAI,CAACC,GAAL,KAAa,CAAb,GAAiB,EAA9B;AACA,SAAKE,WAAL,GAAmB,KAAKhB,KAAL,CAAWC,IAAX,CAAgBgB,MAAnC;AACA,SAAKf,WAAL,GAAmB,EAAnB;AAED;;AAGDgB,EAAAA,yBAAyB,CAAC;AAAEjB,IAAAA;AAAF,GAAD,EAAW;AAClC,QAAIA,IAAI,KAAK,KAAKD,KAAL,CAAWC,IAAxB,EAA8B;AAC5B,YAAME,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGF,IAAZ,CAAZ;AACA,YAAMK,eAAe,GAAG,KAAKN,KAAL,CAAWE,WAAX,GAAyBC,GAAjD;AACA,YAAMI,UAAU,GAAGN,IAAI,CAACO,GAAL,CAASC,CAAC,IAAIL,IAAI,CAACM,KAAL,CAAWJ,eAAe,GAAGG,CAA7B,CAAd,CAAnB;AAEA,WAAKO,WAAL,GAAmBf,IAAI,CAACgB,MAAxB;AAEA,WAAKE,QAAL,CAAc;AACZlB,QAAAA,IAAI,EAAEM;AADM,OAAd;AAGD;AACF;;AAEDa,EAAAA,MAAM,GAAG;AAAA,uBACwC,KAAKpB,KAD7C;AAAA,QACDqB,GADC,gBACDA,GADC;AAAA,QACIlB,GADJ,gBACIA,GADJ;AAAA,QACSmB,KADT,gBACSA,KADT;AAAA,QACgBC,MADhB,gBACgBA,MADhB;AAAA,QACwBrB,WADxB,gBACwBA,WADxB,EAET;;AACEsB,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;;AAHO,kCAIcC,KAJd;AAAA,UAIAI,IAJA;AAAA,UAIMC,IAJN;;AAKP,UAAMC,KAAK,GAAGzB,GAAG,GAAGkB,GAApB;AACA,UAAMQ,KAAK,GAAI,CAACH,IAAI,GAAGL,GAAR,IAAe,KAAKL,WAArB,GAAoCY,KAAlD;AACA,UAAME,GAAG,GAAGD,KAAK,GAAI,CAACF,IAAI,GAAGD,IAAR,IAAgB,KAAKV,WAAtB,GAAqCY,KAAzD;AACA1B,IAAAA,WAAW,GAACE,IAAI,CAACD,GAAL,CAAS,GAAG,KAAKQ,KAAL,CAAWV,IAAvB,CAAZ;AACA,WACE;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,MAAM,EAAC,KAFT;AAGE,MAAA,mBAAmB,EAAC,MAHtB;AAIE,MAAA,KAAK,EAAC,4BAJR;AAKE,MAAA,OAAO,EAAG,OAAM,KAAKe,WAAY,IAAGd,WAAY;AALlD,OAOE,kCACE;AACE,MAAA,EAAE,EAAE,KAAKU,KADX;AAEE,MAAA,CAAC,EAAC,GAFJ;AAGE,MAAA,CAAC,EAAC,GAHJ;AAIE,MAAA,KAAK,EAAE,KAAKI,WAJd;AAKE,MAAA,MAAM,EAAEd;AALV,YAQQ;AACJ,MAAA,CAAC,EAAE2B,KADC;AAEJ,MAAA,CAAC,EAAC,GAFE;AAGJ,MAAA,IAAI,EAAC,OAHD;AAIJ,MAAA,KAAK,EAAEC,GAAG,GAAGD,KAJT;AAKJ,MAAA,MAAM,EAAE3B;AALJ,MARR,CADF,EAiBE;AACE,MAAA,EAAE,EAAE,KAAKa,KADX;AAEE,MAAA,CAAC,EAAC,GAFJ;AAGE,MAAA,CAAC,EAAC,GAHJ;AAIE,MAAA,KAAK,EAAE,KAAKC,WAJd;AAKE,MAAA,MAAM,EAAEd;AALV,OAQE;AACE,MAAA,CAAC,EAAC,GADJ;AAEE,MAAA,CAAC,EAAC,GAFJ;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAE2B,KAJT;AAKE,MAAA,MAAM,EAAE3B;AALV,MARF,EAeE;AACE,MAAA,CAAC,EAAE2B,KADL;AAEE,MAAA,CAAC,EAAC,GAFJ;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAEC,GAAG,GAAGD,KAJf;AAKE,MAAA,MAAM,EAAE3B;AALV,MAfF,EAsBE;AACE,MAAA,CAAC,EAAE4B,GADL;AAEE,MAAA,CAAC,EAAC,GAFJ;AAGE,MAAA,IAAI,EAAC,OAHP;AAIE,MAAA,KAAK,EAAE,KAAKd,WAAL,GAAmBc,GAJ5B;AAKE,MAAA,MAAM,EAAE5B;AALV,MAtBF,CAjBF,CAPF,EAuDG,KAAKS,KAAL,CAAWV,IAAX,CAAgBO,GAAhB,CAAoB,CAACuB,MAAD,EAASC,KAAT,KAAmB;AACtC,aAAQ,+BACN;AACE,QAAA,IAAI,EAAG,QAAO,KAAKjB,KAAM,GAD3B;AAEE,QAAA,CAAC,EAAEiB,KAFL;AAGE,QAAA,CAAC,EAAE9B,WAAW,GAAG6B,MAHnB;AAIE,QAAA,KAAK,EAAC,KAJR;AAKE,QAAA,WAAW,EAAC,KALd;AAME,QAAA,MAAM,EAAEA,MANV;AAOE,QAAA,IAAI,EAAER,MAAM,CAACU;AAPf,QADM,EAUN;AACE,QAAA,IAAI,EAAG,QAAO,KAAKrB,KAAM,GAD3B;AAEE,QAAA,CAAC,EAAEoB,KAFL;AAGE,QAAA,CAAC,EAAE9B,WAAW,GAAG6B,MAHnB;AAIE,QAAA,KAAK,EAAC,KAJR;AAKE,QAAA,WAAW,EAAC,KALd;AAME,QAAA,IAAI,EAAER,MAAM,CAACW,EANf;AAOE,QAAA,MAAM,EAAEH;AAPV,QAVM,CAAR;AAqBD,KAtBA,CAvDH,CADF;AAkFD;;AA/HoD","sourcesContent":["import * as React from 'react';\n\n\nexport default class Histogram extends React.Component {\n\n\n  constructor(props) {\n    super(props);\n\n    let { data, maxHeightPx } = this.props;\n    const max = Math.max(...data);\n    maxHeightPx = maxHeightPx != undefined ? maxHeightPx : 20\n\n    const heightPxPerUnit = maxHeightPx / max;\n    const heightData = data.map(v => Math.round(heightPxPerUnit * v));\n    this.state = {\n      data: heightData,\n    }; this.mask1 = Date.now() + '';\n    this.mask2 = Date.now() + 1 + '';\n    this.numOfColumn = this.props.data.length;\n    this.maxHeightPx = 20\n\n  }\n\n\n  componentWillReceiveProps({ data }) {\n    if (data !== this.props.data) {\n      const max = Math.max(...data);\n      const heightPxPerUnit = this.props.maxHeightPx / max;\n      const heightData = data.map(v => Math.round(heightPxPerUnit * v));\n\n      this.numOfColumn = data.length;\n\n      this.setState({\n        data: heightData,\n      });\n    }\n  }\n\n  render() {\n    let { min, max, value, colors, maxHeightPx } = this.props;\n  //  maxHeightPx = maxHeightPx != undefined ? maxHeightPx : 20\n    console.log(min)\n    const [vMin, vMax] = value;\n    const range = max - min;\n    const start = ((vMin - min) * this.numOfColumn) / range;\n    const end = start + ((vMax - vMin) * this.numOfColumn) / range;\n    maxHeightPx=Math.max(...this.state.data);\n    return (\n      <svg\n        width=\"100%\"\n        height=\"5vh\"\n        preserveAspectRatio=\"none\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${this.numOfColumn} ${maxHeightPx}`}\n      >\n        <defs>\n          <mask\n            id={this.mask1}\n            x=\"0\"\n            y=\"0\"\n            width={this.numOfColumn}\n            height={maxHeightPx}\n          >\n            >\n                  <rect\n              x={start}\n              y=\"0\"\n              fill=\"white\"\n              width={end - start}\n              height={maxHeightPx}\n            />\n          </mask>\n          <mask\n            id={this.mask2}\n            x=\"0\"\n            y=\"0\"\n            width={this.numOfColumn}\n            height={maxHeightPx}\n          >\n\n            <rect\n              x=\"0\"\n              y=\"0\"\n              fill=\"white\"\n              width={start}\n              height={maxHeightPx}\n            />\n            <rect\n              x={start}\n              y=\"0\"\n              fill=\"black\"\n              width={end - start}\n              height={maxHeightPx}\n            />\n            <rect\n              x={end}\n              y=\"0\"\n              fill=\"white\"\n              width={this.numOfColumn - end}\n              height={maxHeightPx}\n            />\n          </mask>\n        </defs>\n        {this.state.data.map((height, index) => {\n          return (<g>\n            <rect\n              mask={`url(#${this.mask2})`}\n              x={index}\n              y={maxHeightPx - height}\n              width=\"1.0\"\n              strokeWidth=\"0.1\"\n              height={height}\n              fill={colors.out}\n            />\n            <rect\n              mask={`url(#${this.mask1})`}\n              x={index}\n              y={maxHeightPx - height}\n              width=\"1.0\"\n              strokeWidth=\"0.1\"\n              fill={colors.in}\n              height={height}\n            />\n          </g>\n          );\n        })}\n      </svg>\n\n    );\n  }\n}\n"],"file":"Histogram.js"}