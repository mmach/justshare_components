{"version":3,"sources":["../../../../src/Shared/DTO/CategoryOptions/CategoryOptionsDTO.js"],"names":["BaseDTO","Validator","CategoryOptionsDTO","constructor","cot_id","type","name","name_pl","name_us","name_de","name_ru","name_fr","name_es","name_no","name_zh_cn","status","order","is_searchable","is_require","limit_of","is_on_pin_map","is_on_map","is_form_hidden","search_label","undefined","search_type","show_value","can_above_pin","is_visible_view","validation","state","validator","display","isString","notEmpty","map","item","run"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,2BAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAGA,eAAe,MAAMC,kBAAN,SAAiCF,OAAjC,CAAyC;AACpDG,EAAAA,WAAW,GAAG;AACV;AAEA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,YAAL,GAAoBC,SAApB;AACA,SAAKC,WAAL,GAAmBD,SAAnB;AACA,SAAKE,UAAL,GAAkBF,SAAlB;AACA,SAAKG,aAAL,GAAqBH,SAArB;AACA,SAAKI,eAAL,GAAsBJ,SAAtB;AACH;;AACDK,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,UAAMC,SAAS,GAAG,IAAI9B,SAAJ,EAAlB;AACA8B,IAAAA,SAAS,CAACD,KAAK,CAACxB,IAAP,CAAT,CAAsB0B,OAAtB,CAA8B,MAA9B,EAAsCC,QAAtC,GAAiDC,QAAjD;AACA,KAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,EAAqC,IAArC,EAA2C,OAA3C,EAAoDC,GAApD,CAAwDC,IAAI,IAAI;AAC5DL,MAAAA,SAAS,CAACD,KAAK,CAAC,UAAUM,IAAX,CAAN,CAAT,CAAiCJ,OAAjC,CAAyC,UAAUI,IAAnD,EAAyDH,QAAzD,GAAoEC,QAApE;AAEH,KAHD;AAIA;;;;;;;;;;;AAUAH,IAAAA,SAAS,CAACD,KAAK,CAACzB,IAAP,CAAT,CAAsB2B,OAAtB,CAA8B,MAA9B,EAAsCC,QAAtC,GAAiDC,QAAjD;AACAH,IAAAA,SAAS,CAACD,KAAK,CAAC1B,MAAP,CAAT,CAAwB4B,OAAxB,CAAgC,QAAhC,EAA0CC,QAA1C,GAAqDC,QAArD,GAlBc,CAoBd;;AAEA,WAAOH,SAAS,CAACM,GAAV,EAAP;AACH;;AApDmD","sourcesContent":["import BaseDTO from \"../../BaseObjects/baseDTO\";\r\nimport Validator from 'better-validator';\r\n\r\n\r\nexport default class CategoryOptionsDTO extends BaseDTO {\r\n    constructor() {\r\n        super();\r\n\r\n        this.cot_id = '';\r\n        this.type = '';\r\n        this.name = '';\r\n        this.name_pl = '';\r\n        this.name_us = '';\r\n        this.name_de = '';\r\n        this.name_ru = '';\r\n        this.name_fr = '';\r\n        this.name_es = '';\r\n        this.name_no = '';\r\n        this.name_zh_cn = '';\r\n        this.status = '';\r\n        this.order = '';\r\n        this.is_searchable = ''\r\n        this.is_require = ''\r\n        this.limit_of = ''\r\n        this.is_on_pin_map = false\r\n        this.is_on_map = false\r\n        this.is_form_hidden = false;\r\n        this.search_label = undefined\r\n        this.search_type = undefined\r\n        this.show_value = undefined\r\n        this.can_above_pin = undefined;\r\n        this.is_visible_view= undefined;\r\n    }\r\n    validation(state) {\r\n        const validator = new Validator();\r\n        validator(state.name).display(\"name\").isString().notEmpty();\r\n        [\"pl\", \"us\", \"de\", \"ru\", \"fr\", \"es\", \"no\", \"zh_cn\"].map(item => {\r\n            validator(state[\"name_\" + item]).display(\"name_\" + item).isString().notEmpty();\r\n\r\n        })\r\n        /*\r\n        validator(state.name_pl).display(\"name_pl\").isString().notEmpty();\r\n        validator(state.name_us).display(\"name_us\").isString().notEmpty();\r\n        validator(state.name_de).display(\"name_de\").isString().notEmpty();\r\n        validator(state.name_ru).display(\"name_ru\").isString().notEmpty();\r\n        validator(state.name_fr).display(\"name_fr\").isString().notEmpty();\r\n        validator(state.name_es).display(\"name_es\").isString().notEmpty();\r\n        validator(state.name_no).display(\"name_no\").isString().notEmpty();\r\n        validator(state.name_zh_cn).display(\"name_zh_cn\").isString().notEmpty();\r\n        */\r\n        validator(state.type).display(\"type\").isString().notEmpty();\r\n        validator(state.cot_id).display(\"cot_id\").isString().notEmpty();\r\n\r\n        //validator(state.surname).display(\"surname\").isString().notEmpty();\r\n\r\n        return validator.run();\r\n    };\r\n}\r\n"],"file":"CategoryOptionsDTO.js"}