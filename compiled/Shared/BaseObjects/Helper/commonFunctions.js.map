{"version":3,"sources":["../../../../src/Shared/BaseObjects/Helper/commonFunctions.js"],"names":["String","prototype","format","args","arguments","replace","match","number","global","guid","s4","Math","floor","random","toString","substring","decodeBase64Image","dataString","matches","response","length","Error","type","data","Buffer","stringToBytesFaster","str","ch","st","re","j","i","charCodeAt","push","reverse","k"],"mappings":"AAAA;AAEA,IAAI,CAACA,MAAM,CAACC,SAAP,CAAiBC,MAAtB,EAA8B;AAC5BF,EAAAA,MAAM,CAACC,SAAP,CAAiBC,MAAjB,GAA0B,YAAW;AACnC,QAAIC,IAAI,GAAGC,SAAX;AACA,WAAO,KAAKC,OAAL,CAAa,UAAb,EAAyB,UAASC,KAAT,EAAgBC,MAAhB,EAAwB;AACtD,aAAO,OAAOJ,IAAI,CAACI,MAAD,CAAX,IAAuB,WAAvB,GAAqCJ,IAAI,CAACI,MAAD,CAAzC,GAAoDD,KAA3D;AACD,KAFM,CAAP;AAGD,GALD;AAMD;AACD;;;;;;AAOA;;;AACAE,MAAM,CAACC,IAAP,GAAc,YAAW;AACvB,WAASC,EAAT,GAAc;AACZ,WAAOC,IAAI,CAACC,KAAL,CAAW,CAAC,IAAID,IAAI,CAACE,MAAL,EAAL,IAAsB,OAAjC,EACJC,QADI,CACK,EADL,EAEJC,SAFI,CAEM,CAFN,CAAP;AAGD;;AACD,SACEL,EAAE,KACFA,EAAE,EADF,GAEA,GAFA,GAGAA,EAAE,EAHF,GAIA,GAJA,GAKAA,EAAE,EALF,GAMA,GANA,GAOAA,EAAE,EAPF,GAQA,GARA,GASAA,EAAE,EATF,GAUAA,EAAE,EAVF,GAWAA,EAAE,EAZJ;AAcD,CApBD;;AAsBAF,MAAM,CAACQ,iBAAP,GAA2B,UAASC,UAAT,EAAqB;AAC9C,MAAIC,OAAO,GAAGD,UAAU,CAACX,KAAX,CAAiB,oCAAjB,CAAd;AAAA,MACEa,QAAQ,GAAG,EADb;;AAGA,MAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,IAAIC,KAAJ,CAAU,sBAAV,CAAP;AACD;;AAEDF,EAAAA,QAAQ,CAACG,IAAT,GAAgBJ,OAAO,CAAC,CAAD,CAAvB;AACAC,EAAAA,QAAQ,CAACI,IAAT,GAAgB,IAAIC,MAAJ,CAAWN,OAAO,CAAC,CAAD,CAAlB,EAAuB,QAAvB,CAAhB;AAEA,SAAOC,QAAP;AACD,CAZD;;AAcAX,MAAM,CAACiB,mBAAP,GAA6B,UAASC,GAAT,EAAc;AACzC;AACA,MAAIC,EAAJ;AAAA,MACEC,EADF;AAAA,MAEEC,EAAE,GAAG,EAFP;AAAA,MAGEC,CAAC,GAAG,CAHN;;AAIA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAAG,CAACN,MAAxB,EAAgCW,CAAC,EAAjC,EAAqC;AACnCJ,IAAAA,EAAE,GAAGD,GAAG,CAACM,UAAJ,CAAeD,CAAf,CAAL;;AACA,QAAIJ,EAAE,GAAG,GAAT,EAAc;AACZE,MAAAA,EAAE,CAACC,CAAC,EAAF,CAAF,GAAUH,EAAE,GAAG,IAAf;AACD,KAFD,MAEO;AACLC,MAAAA,EAAE,GAAG,EAAL,CADK,CACI;;AACT,SAAG;AACDA,QAAAA,EAAE,CAACK,IAAH,CAAQN,EAAE,GAAG,IAAb,EADC,CACmB;;AACpBA,QAAAA,EAAE,GAAGA,EAAE,IAAI,CAAX,CAFC,CAEa;AACf,OAHD,QAGSA,EAHT,EAFK,CAML;AACA;;;AACAC,MAAAA,EAAE,GAAGA,EAAE,CAACM,OAAH,EAAL;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,EAAE,CAACR,MAAvB,EAA+B,EAAEe,CAAjC,EAAoCN,EAAE,CAACC,CAAC,EAAF,CAAF,GAAUF,EAAE,CAACO,CAAD,CAAZ;AACrC;AACF,GArBwC,CAsBzC;;;AACA,SAAON,EAAP;AACD,CAxBD","sourcesContent":["// First, checks if it isn't implemented yet.\r\n\r\nif (!String.prototype.format) {\r\n  String.prototype.format = function() {\r\n    let args = arguments;\r\n    return this.replace(/{(\\d+)}/g, function(match, number) {\r\n      return typeof args[number] != \"undefined\" ? args[number] : match;\r\n    });\r\n  };\r\n}\r\n/*\r\nif (!Object.prototype.logger) {\r\n    Object.prototype.logger = function (dto) {\r\n        return dto;\r\n    };\r\n}*/\r\n\r\n//guid\r\nglobal.guid = function() {\r\n  function s4() {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n      .toString(16)\r\n      .substring(1);\r\n  }\r\n  return (\r\n    s4() +\r\n    s4() +\r\n    \"-\" +\r\n    s4() +\r\n    \"-\" +\r\n    s4() +\r\n    \"-\" +\r\n    s4() +\r\n    \"-\" +\r\n    s4() +\r\n    s4() +\r\n    s4()\r\n  );\r\n};\r\n\r\nglobal.decodeBase64Image = function(dataString) {\r\n  var matches = dataString.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/),\r\n    response = {};\r\n\r\n  if (matches.length !== 3) {\r\n    return new Error(\"Invalid input string\");\r\n  }\r\n\r\n  response.type = matches[1];\r\n  response.data = new Buffer(matches[2], \"base64\");\r\n\r\n  return response;\r\n};\r\n\r\nglobal.stringToBytesFaster = function(str) {\r\n  //http://stackoverflow.com/questions/1240408/reading-bytes-from-a-javascript-string\r\n  var ch,\r\n    st,\r\n    re = [],\r\n    j = 0;\r\n  for (var i = 0; i < str.length; i++) {\r\n    ch = str.charCodeAt(i);\r\n    if (ch < 127) {\r\n      re[j++] = ch & 0xff;\r\n    } else {\r\n      st = []; // clear stack\r\n      do {\r\n        st.push(ch & 0xff); // push byte to stack\r\n        ch = ch >> 8; // shift value down by 1 byte\r\n      } while (ch);\r\n      // add stack contents to result\r\n      // done because chars have \"wrong\" endianness\r\n      st = st.reverse();\r\n      for (var k = 0; k < st.length; ++k) re[j++] = st[k];\r\n    }\r\n  }\r\n  // return an array of bytes\r\n  return re;\r\n};\r\n"],"file":"commonFunctions.js"}