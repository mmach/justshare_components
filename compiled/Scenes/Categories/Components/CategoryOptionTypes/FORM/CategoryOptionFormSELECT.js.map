{"version":3,"sources":["../../../../../../src/Scenes/Categories/Components/CategoryOptionTypes/FORM/CategoryOptionFormSELECT.jsx"],"names":["React","connect","uuidv4","QueryList","BaseService","DropDownList","Translator","CategoryOptionFormSELECT","Component","constructor","props","state","validation","id","values","onChange","event","setState","target","value","val","catOption","cat_opt_temp","filter","item","console","log","cat_opt_id","select","element","type","col_id","category_link","getDropDownValues","map","lang","render","tran","codeDict","data","LABEL","phTrans","PLACEHOLDER","link","is_require","bind","mapStateToProps","DictionaryReducer","LanguageReducer","mapDispatchToProps","dispatch","getReverseGeocode","query","queryThunt","City","REVERSE_GEO"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport uuidv4 from \"uuid/v4\";\r\nimport QueryList from '../../../../../Shared/QueryList';\r\nimport { BaseService } from '../../../../../App/Architecture/baseServices.js';\r\nimport DropDownList from '../../../../../Components/FormComponent/Components/DropDownList/index.jsx';\r\nimport { Translator } from './../../../../../Shared/index.js';\r\n\r\n\r\n\r\nclass CategoryOptionFormSELECT extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n        this.state.validation = [];\r\n        this.state.id = this.props.values ? this.props.values : {};\r\n\r\n    }\r\n\r\n\r\n    onChange(event) {\r\n\r\n        this.setState({\r\n            id: event.target.value\r\n        });\r\n        let val = this.props.catOption.cat_opt_temp.filter(item => {\r\n            return item.id == event.target.value\r\n        })\r\n        console.log(val);\r\n        this.props.onChange(this.props.catOption, [{id:uuidv4(),\r\n            cat_opt_id: event.target.value, \r\n            val: event.target.value,\r\n             select: val[0],\r\n              element: this.props.catOption.id,\r\n               type: 'SELECT',\r\n               col_id:this.props.catOption.category_link[0].id\r\n                    }])\r\n\r\n    }\r\n    getDropDownValues() {\r\n        return [{ id: '', value: '', type: \"\" }, ...this.props.catOption.cat_opt_temp.map(item => {\r\n            return { id: item.id, value: item[\"value_\" + this.props.lang], type: item[\"value_\" + this.props.lang] }\r\n        })];\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const tran = Translator(this.props.codeDict.data.LABEL, this.props.lang);\r\n        const phTrans = Translator(this.props.codeDict.data.PLACEHOLDER, this.props.lang);\r\n        const link = this.props.catOption.category_link[0];\r\n\r\n        console.log(this.props.catOption)\r\n        return (\r\n            <DropDownList\r\n                isRequired={link.is_require ? link.is_require : this.props.catOption.is_require}\r\n                label={this.props.catOption[\"name_\" + this.props.lang]}\r\n                valueOptions={this.getDropDownValues.bind(this)()}\r\n                value={this.state.id}\r\n                onChange={this.onChange.bind(this)}//this.typeHandler.bind(this)}\r\n                validation={this.state.validation} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n        codeDict: state.DictionaryReducer,\r\n        lang: state.LanguageReducer,\r\n        //  catOptions: state.EditCategoryReducer\r\n\r\n    };\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n\r\n\r\n\r\n        getReverseGeocode: (query) => {\r\n            return dispatch(new BaseService().queryThunt(QueryList.City.REVERSE_GEO, { query: query }));\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CategoryOptionFormSELECT);\r\n\r\n"],"file":"CategoryOptionFormSELECT.js"}