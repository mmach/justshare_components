{"version":3,"sources":["../../../../../src/Scenes/Categories/Scenes/CategoryTreePreview/index.jsx"],"names":["React","connect","SortableTree","Col","Input","QueryList","LinkAuth","Translator","BaseService","CategoryTreePreview","Component","constructor","props","state","treeData","loading","categories","search","isLeaf","node","categoryTree","filter","item","category_parent_id","category_child_id","length","list_to_tree","list","map","roots","i","children","push","componentDidMount","getAllCategories","status","then","succ","console","log","verified","data","resultVer","setState","items","document","getElementsByClassName","classList","remove","searchHandler","event","target","value","refreshTree","setImmediate","categoryId","querySelector","getAttribute","add","render","codeList","PLACEHOLDER","lang","translate","bind","validation","toUpperCase","setOnlyLeaf","title","icon","onClick","mapStateToProps","DictionaryReducer","LanguageReducer","CategoryTreeReducer","mapDispatchToProps","dispatch","type","parent","queryThunt","Category","GET_CATEGORIES_ALL_TREE"],"mappings":"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","sourcesContent":["/*\r\n    ./client/components/App.jsx\r\n*/\r\n\r\nimport React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport SortableTree from \"react-sortable-tree\";\r\nimport 'react-sortable-tree/style.css'; // This only needs to be imported once in your app\r\nimport { Col, Input } from 'reactstrap';\r\nimport QueryList from '../../../../Shared/QueryList.js';\r\nimport LinkAuth from '../../../../Components/LinkAuth/index.jsx';\r\nimport { Translator } from './../../../../Shared/index.js';\r\nimport { BaseService } from './../../../../App/index.js';\r\n\r\n\r\n\r\n\r\n\r\nclass CategoryTreePreview extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            treeData: [],\r\n            loading: false,\r\n            categories: [],\r\n            search: \"\"\r\n        };\r\n    }\r\n    /*  componentWillReceiveProps(next) {\r\n          if (next.categoryTree.categories.length > 0 && next.categoryTree.isLoading == false) {\r\n            \r\n          }\r\n      }*/\r\n    isLeaf(node) {\r\n        return this.props.categoryTree.categories.filter(item => {\r\n            return item.category_parent_id == node.node.category_child_id;\r\n        }).length == 0\r\n    }\r\n    list_to_tree(list) {\r\n        var map = {}, node, roots = [], i;\r\n        for (i = 0; i < list.length; i += 1) {\r\n            map[list[i].category_child_id] = i; // initialize the map\r\n            list[i].children = []; // initialize the children\r\n        }\r\n        for (i = 0; i < list.length; i += 1) {\r\n            node = list[i];\r\n            if (node.category_parent_id !== null) {\r\n                // if you have dangling branches check that map[node.parentId] exists\r\n                list[map[node.category_parent_id]].children.push(node);\r\n            } else {\r\n                roots.push(node);\r\n            }\r\n        }\r\n        return roots;\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getAllCategories({ status: 1 }).then(succ => {\r\n            console.log(succ);\r\n            let verified = succ.data.filter(item => {\r\n                return item.status == 1;\r\n            });\r\n            let resultVer = this.list_to_tree(verified.map(item => {\r\n\r\n\r\n                return item;\r\n            }))\r\n\r\n            this.setState({\r\n                categories: succ.data,\r\n                treeData: resultVer\r\n            });\r\n            let items = document.getElementsByClassName('rst__rowContents');\r\n            for (let i = 0; i < items.length; i++) {\r\n                items.item(i).classList.remove(\"leaf_in_tree\");\r\n                items.item(i).classList.remove(\"leaf_in_tree--active\");\r\n            }\r\n        })\r\n    }\r\n    searchHandler(event) {\r\n        let search = event.target.value;\r\n        this.setState({\r\n            search: search\r\n        });\r\n       // this.refreshTree();\r\n\r\n    }\r\n    refreshTree(event) {\r\n        setImmediate(() => {\r\n\r\n            console.log(this.props.categoryId);\r\n            let items = document.getElementsByClassName('rst__rowContents');\r\n            for (let i = 0; i < items.length; i++) {\r\n                items.item(i).classList.remove(\"leaf_in_tree\");\r\n                items.item(i).classList.remove(\"leaf_in_tree--active\");\r\n\r\n                let item = items.item(i).querySelector('.u-link-v5')\r\n                //     console.log();\r\n                if (item) {\r\n                    if (this.props.categoryId == item.getAttribute('data-key')) {\r\n                        items.item(i).classList.add(\"leaf_in_tree--active\");\r\n\r\n                    } else {\r\n                        items.item(i).classList.add(\"leaf_in_tree\");\r\n\r\n                    }\r\n\r\n                }\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n\r\n        this.refreshTree();\r\n        return (\r\n            // <ScrollArea\r\n            //     horizontal={true}\r\n            //    style={{ height: 'auto', width: '400px' }}>\r\n            <Col>\r\n                <Input placeholder={Translator(this.props.codeList.data.PLACEHOLDER, this.props.lang).translate('FILTER_CATEGORIES_PLACEHOLDER')} isRequired={true} value={this.state.search} onChange={this.searchHandler.bind(this)} field=\"message.es\" validation={this.state.validation} />\r\n\r\n                <SortableTree\r\n                    isVirtualized={false}\r\n                    rowHeight={55}\r\n                    // style={{ height: '800px', maxHeight: '800px' }}\r\n                    treeData={this.state.treeData}\r\n                    onChange={treeData => {\r\n                        this.setState({ treeData });\r\n\r\n\r\n                    }}\r\n                    onVisibilityToggle={() => {\r\n\r\n                        this.refreshTree.bind(this)()\r\n                    }}\r\n                    canDrag={(node) => {\r\n                        return false\r\n                    }}\r\n\r\n                    searchQuery={this.state.search.toUpperCase()}\r\n                    onlyExpandSearchedNodes={true}\r\n\r\n\r\n                    //    nodeContentRenderer={CategoryTreeElement}\r\n                    generateNodeProps={(item) => {\r\n                        if (this.props.setOnlyLeaf == true) {\r\n\r\n                            let items = document.getElementsByClassName('rst__rowContents');\r\n\r\n\r\n\r\n                            if (this.isLeaf.bind(this)(item) == true) {\r\n                                item.node.title = (\r\n                                    <span>{item.node.icon ? <i className={item.node.icon}></i> : <span></span>}\r\n\r\n                                        <span data-name={item.node[\"category_\" + this.props.lang]} data-key={item.node.category_child_id} data-icon={item.node.icon} onClick={(event) => { this.props.onClick(event); this.refreshTree.bind(this)() }} className=\"g-pl-7--hover text-uppercase u-link-v5 g-font-weight-600 g-max-width-200  g-mx-0 g-py-0 g-mx-10 g-pt-10 g-pb-10 g-pr-20  g-color-white g-font-size-12 g-cursor-pointer \">\r\n                                            {item.node[\"category_\" + this.props.lang].toUpperCase()}\r\n                                        </span>\r\n                                    </span>\r\n                                )\r\n                            } else {\r\n\r\n                                item.node.title = (\r\n                                    <span>{item.node.icon ? <i className={item.node.icon}></i> : <span></span>}\r\n                                        <span className=\" text-uppercase   g-font-weight-600 g-py-0 g-mx-10  g-color-gray-dark-v4 g-font-size-12 \">\r\n                                            {item.node[\"category_\" + this.props.lang].toUpperCase()}\r\n                                        </span>\r\n                                    </span>\r\n                                )\r\n                            }\r\n\r\n\r\n                        } else {\r\n                            item.node.title = (< span > {item.node.icon ? <i className={item.node.icon}></i> : <span></span>}\r\n                                < LinkAuth to={`/ categories / edit / ${item.node.category_child_id}`\r\n                                } className=\" g-pl-7--hover text-uppercase   u-link-v5 g-font-weight-600 g-py-0 g-mx-10  g-color-gray-dark-v4 g-font-size-12 g-color-primary--hover\" >\r\n                                    {item.node[\"category_\" + this.props.lang].toUpperCase()}\r\n                                </LinkAuth>\r\n                            </span>)\r\n                        }\r\n\r\n                        return item;\r\n                    }}\r\n                />\r\n            </Col >\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n\r\n    return {\r\n\r\n\r\n        codeList: state.DictionaryReducer,\r\n        lang: state.LanguageReducer,\r\n        categoryTree: state.CategoryTreeReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getAllCategories: ({ status, type, parent }) => {\r\n            return dispatch(new BaseService().queryThunt(QueryList.Category.GET_CATEGORIES_ALL_TREE, { status: status }))\r\n        }\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CategoryTreePreview);"],"file":"index.js"}